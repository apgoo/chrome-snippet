
class Node {
    constructor(val) {
        this.val = val;  //"love"
        this.next = null; 
    }
}

class SinglyLink{
    constructor() {
    this.head = null; // "love"
    this.tail = null; // (if) "this.head" => "love" : (else) => this.tail="india"
    this.length = 0;
    }

    pushh(val) { // push the valu to last in list
        var newNode = new Node(val);  //new obj was created to NODE val="love"/ next=null; 
        if(!this.head) {              // only its true for first insertion
            this.head = newNode;      //newNode = "love"
            this.tail = this.head;    //tail = "love"

        } else {                      //if items are already there this condition will run 
            this.tail.next = newNode; // "india" add to {next} value
            this.tail = newNode;      // alrady item there it will added to this.tail = "india"  
        }
        this.length++;
        return this;

    }

    pop() { // remove the last valu of list
        //  var list = new Node(val);
          if(!this.head) return undefined;
             let curr = this.head; //1
             let newTail = curr //1
             while(curr.next) { //run untill null //curr.next = 1,10,100 ,null 
                newTail = curr;   // 10
                curr = curr.next; // 10.next => 100 
             }
             this.tail = newTail; // 10 is a tail 
             this.tail.next = null;  // tail.nxet null
             this.length--; // each excution of pop length will decrise
             if(this.length === 0) this.head = this.tail = null; //llength 0 then reset the head and tail;
             return curr;  // return cur = 100;
    }

    shift() { // remove the first value of list 
         if(!this.head) return undefined; //if there is empty obj return undefined
         let currentHd = this.head;      // set currentHd of head's val // "hay"
         this.head = currentHd.next;    //  head = hay.next(welcome) 
         this.length--;
         if(this.length === 0) this.tail = null;
         return currentHd;
    }
    unShift(val) { // add a new node to the first postion from the list 
        let newNode = new Node(val);
        if(!this.head) {
            this.head = newNode;
            this.tail= newNode;
        } else {
            newNode.next = this.head;
            this.head = newNode
        }
        this.head ? this.length++ : this.head = null;
        return this;
    }
    get(index) { //2 take the index and valu
        if(index < 0 || index >= this.length) return null;
        let current = this.head; //0,
        let counter = 0; //0,1,2
        while(counter !== index) { //0,1 2 !== 2 
            current = current.next; //current = 2ind
            counter++; ///0+1+1 = 2 
        }
        return current; //2 index return 
    }
    set(index, val) { // update val specifi index
        let findNode = this.get(index); //find the index using get method
        if(findNode) {  //if find node exist
            findNode.val = val; //update the val to the findNode
            return true; // if conditio ruin return true 
        }
         return false;
    }
   insert(index, val) {  //add  a node middle or where ever er want
        if(index < 0 || index > this.length) return false; // ind -1 or ind bigger the length
        if(index === this.length) return !!this.pushh(val); // if eqal to length call pushh(val)
        if(index === 0) return !!this.unShift(val); // no index in list add first val as a call unshift()

        let newNode = new Node(val); // add val as a Node to new
        let prev = this.get(index-1);//get prevus index using get()
        let temp = prev.next; // exist index val save to temp variable
        prev.next = newNode; // add new val  to prev after index 
        newNode.next = temp; // save temp variable to new Index's after 
        this.length++;//incressi
        return true;
    }    
    remove(index) {
        if(index < 0 || index >= this.length) return undefined;
        if(index === this.length-1) return this.pop();
        
        if(index === 0)  return this.shift();
        let preNode = this.get(index -1);
        let remove = preNode.next;
        reNode.next =  remove.next;
        this.length--;
        return remove;
    }
    revers() {
        let node = this.head; // 100->
        this.head = this.tail; //250
        this.tail = node; // 100
        let nex;   //null,150->200
        let pre = null;//100->150
        for(let i = 0; i <1; i++) { //0,1,2,3
            nex = node.next; //150->200->250->null
            node.next = pre; //null 100->150->200
            pre = node; //100->150->200->250
            node = nex; // 150->200->250->null
        }  

        return this;

    }
    print() {
        let newArr  = [];
        let curr = this.head;
        while(curr) {
            newArr.push(curr.val);
            curr = curr.next;
        }
        return newArr;
    }

}


var list = new SinglyLink();

list.pushh("hay");  //0
list.pushh("welcome"); //1
list.pushh("to");  //2
list.pushh("india"); //3

/*list.pushh(100);  //0
list.pushh(150); //1
list.pushh(200);  //2
list.pushh(250); //3*/



/*
var first = new Node("hello");
first.next = new Node("welcome")
first.next.next = new Node("to")
first.next.next.next = new Node("india")

*/

